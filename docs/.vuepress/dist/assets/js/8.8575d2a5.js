(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{355:function(t,a,s){"use strict";s.r(a);var r=s(43),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("h2",{attrs:{id:"写在前面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),s("p",[t._v("数据结构就是各数据元素之间的逻辑关系，大致分为集合关系，线性关系，树关系，图关系")]),t._v(" "),s("h2",{attrs:{id:"线性表逻辑结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表逻辑结构"}},[t._v("#")]),t._v(" 线性表逻辑结构")]),t._v(" "),s("p",[t._v("由n(n≥0)个数据元素构成的有限序列。记作: L=(a1 ,a2...,an)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708c6f4ba10773c?w=819&h=457&f=png&s=309211",alt:""}}),t._v("\n前面的珠子就叫直接前驱，后面的叫直接后继，表长就是数据元素个数")]),t._v(" "),s("h2",{attrs:{id:"线性表存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表存储结构"}},[t._v("#")]),t._v(" 线性表存储结构")]),t._v(" "),s("p",[t._v("线性表在内存中的两种数据结构")]),t._v(" "),s("ul",[s("li",[t._v("链式存储")]),t._v(" "),s("li",[t._v("顺序存储，静态，动态")])]),t._v(" "),s("h2",{attrs:{id:"adt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adt"}},[t._v("#")]),t._v(" ADT")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708c8161af37ea9?w=1268&h=371&f=png&s=415165",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708c81936784625?w=1265&h=402&f=png&s=446022",alt:""}}),t._v("\n更复杂的操作组合完成")]),t._v(" "),s("h2",{attrs:{id:"静态顺序存储，动态顺序存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态顺序存储，动态顺序存储"}},[t._v("#")]),t._v(" 静态顺序存储，动态顺序存储")]),t._v(" "),s("p",[t._v("在内存中找一块固定大小地方放下，在c语言中可以由一维数组实现，如果超出该内存大小就会溢出")]),t._v(" "),s("p",[t._v("描述顺序存储结构")]),t._v(" "),s("ol",[s("li",[t._v("存储空间的起始位置:数组data,它的存储位置就是存储空间的存储位置。")]),t._v(" "),s("li",[t._v("线性表的最大存储容量:数组长度MaxSize。")]),t._v(" "),s("li",[t._v("线性表的当前长度: length。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("数组长度和线性表的长度")]),t._v(" "),s("ul",[s("li",[t._v("注意数组长度和线性表的长度，数组的长度是存放线性表的存储空间的长度，存储分配后这个量是一般是不变的")]),t._v(" "),s("li",[t._v("线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行,这个量是变化的。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/29/1708c8fe9e4d8da4?w=1250&h=397&f=png&s=129619",alt:""}})]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("静态顺序存储，动态顺序存储")]),t._v(" "),s("ul",[s("li",[t._v("一般高级语言， 比如C、VB、C++都可以用编程手段实现动态分配数组，不过这会带来性能上的损耗。")]),t._v(" "),s("li",[t._v("动态顺序存储，如果数组长度不够用了，溢出了，那么会在内存中找一块更大的地方把线性表搬过去")])]),t._v(" "),s("h2",{attrs:{id:"静态存储的寻址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态存储的寻址"}},[t._v("#")]),t._v(" 静态存储的寻址")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/29/1708c94b6f9caaba?w=1116&h=281&f=png&s=86078",alt:""}}),t._v("\n由于每个数据元素，不管它是整型、实型还是字符型，它都是需要占用一定的存储单元空间的。假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置，LOC(ai) = LOC(a1) + (i-1)C")])])}),[],!1,null,null,null);a.default=v.exports}}]);